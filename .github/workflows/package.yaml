name: Package

env:
  PKG_CONFIG_PATH: /usr/local/opt/icu4c/lib/pkgconfig
  LC_COLLATE: en_US.UTF-8
on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"
jobs:
  package:
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.9]
        os: [ubuntu-latest, macos-11, windows-latest]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install tox
        run: |
          python -m pip install --upgrade --upgrade-strategy eager tox

      - name: Install macos dependencies
        run: |
          brew install icu4c pkg-config
          # export PKG_CONFIG_PATH="/usr/local/opt/icu4c/lib/pkgconfig";
          # export PATH="/usr/local/opt/icu4c/bin:/usr/local/opt/icu4c/sbin:$PATH"
        if: runner.os == 'macOS'

      - name: Install linux dependencies
        run: |
          sudo apt-get update && sudo apt-get upgrade && sudo apt-get install pkg-config libicu-dev libqt5gui5 libfuse2
          # export PKG_CONFIG_PATH="/usr/local/opt/icu4c/lib/pkgconfig";
          # export PATH="/usr/local/opt/icu4c/bin:/usr/local/opt/icu4c/sbin:$PATH"
        if: runner.os == 'Linux'

      - name: Build, Install and Test PyPi packages
        run: |
          python -m tox r
          python -m tox r -m release
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

      - name: Get release name
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/* # github is dumb
          echo "release_name=$(git tag -l --format "%(refname:strip=2): %(contents:lines=1)" ${{ github.ref_name }})" >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: "${{ env.release_name }}"
          prerelease: "${{ contains(github.ref, '-') }}" # alpha-releases should be 1.3.0-alpha.x full releases should be 1.3.0
          draft: false
          # upload the single application zip file for each OS and include the wheel built on linux
          files: |
            dist/*.zip
            dist/*${{ fromJSON('["never", ""]')[runner.os == 'Linux'] }}.whl
            dist/*.AppImage
